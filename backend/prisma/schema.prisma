generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Tenant {
  id   String @id @map("_id") @default(auto()) @db.ObjectId
  name String
  slug String @unique

  users            User[]
  assets           Asset[]
  workOrders       WorkOrder[]
  parts            Part[]
  downtimeLogs     DowntimeLog[]
  shifts           Shift[]
  laborEntries     LaborEntry[]
  teamInvitations  TeamInvitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenants")
}

model User {
  id           String @id @map("_id") @default(auto()) @db.ObjectId
  tenantId     String @map("tenant_id") @db.ObjectId
  email        String @unique
  passwordHash String @map("password_hash")
  name         String
  role         String @default("user")

  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdWorkOrders WorkOrder[] @relation("CreatedBy")
  assignedWorkOrders WorkOrder[] @relation("Assignee")
  shifts            Shift[]
  laborEntries      LaborEntry[]
  sentInvitations   TeamInvitation[] @relation("InvitedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum WorkOrderPriority {
  low
  medium
  high
  urgent
}

enum WorkOrderStatus {
  requested
  assigned
  in_progress
  completed
  cancelled
}

enum AssetStatus {
  operational
  maintenance
  down
  retired
  decommissioned
}

model Asset {
  id       String @id @map("_id") @default(auto()) @db.ObjectId
  tenantId String @map("tenant_id") @db.ObjectId
  siteId   String? @map("site_id") @db.ObjectId
  lineId   String? @map("line_id") @db.ObjectId
  code     String
  name     String
  location String?
  category String?
  purchaseDate DateTime? @map("purchase_date")
  cost     Float?   @map("cost")
  status   AssetStatus @default(operational)

  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workOrders WorkOrder[]
  downtimeLogs DowntimeLog[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assets")
  @@index([tenantId])
  @@index([tenantId, status])
  @@index([tenantId, siteId])
  @@index([tenantId, lineId])
}

model WorkOrder {
  id            String            @id @map("_id") @default(auto()) @db.ObjectId
  tenantId      String            @map("tenant_id") @db.ObjectId
  siteId        String?           @map("site_id") @db.ObjectId
  lineId        String?           @map("line_id") @db.ObjectId
  title         String
  description   String?
  priority      WorkOrderPriority @default(medium)
  status        WorkOrderStatus   @default(requested)
  assetId       String?           @map("asset_id") @db.ObjectId
  assigneeId    String?           @map("assigned_to") @db.ObjectId
  category      String?
  dueDate       DateTime?         @map("due_date")
  attachments   String[]          @default([])

  partsUsed     Json?             @map("parts_used")
  signatures    Json?
  timeSpentMin  Int?              @map("time_spent_min")
  failureCode   String?           @map("failure_code")
  pmTaskId      String?           @map("pm_task_id") @db.ObjectId
  createdBy     String            @map("created_by") @db.ObjectId
  startedAt     DateTime?         @map("started_at")
  completedAt   DateTime?         @map("completed_at")
  isPreventive  Boolean           @map("is_preventive") @default(false)

  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignee      User?    @relation("Assignee", fields: [assigneeId], references: [id])
  createdByUser User     @relation("CreatedBy", fields: [createdBy], references: [id])

  asset         Asset?   @relation(fields: [assetId], references: [id])
  laborEntries  LaborEntry[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_orders")
  @@index([tenantId, siteId], map: "work_orders_tenant_site_idx")
  @@index([tenantId, status], map: "work_orders_tenant_status_idx")
  @@index([tenantId, dueDate], map: "work_orders_tenant_duedate_idx")
  @@index([tenantId, status, priority], map: "work_orders_tenant_status_priority_idx")
  @@index([tenantId, completedAt], map: "work_orders_tenant_completed_idx")
}

model DowntimeLog {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  tenantId  String   @map("tenant_id") @db.ObjectId
  assetId   String   @map("asset_id") @db.ObjectId
  siteId    String?  @map("site_id") @db.ObjectId
  lineId    String?  @map("line_id") @db.ObjectId
  startedAt DateTime @map("started_at")
  endedAt   DateTime @map("ended_at")
  minutes   Int      @default(0)

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  asset  Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("downtime_logs")
  @@index([tenantId, startedAt], map: "downtime_tenant_started_idx")
  @@index([tenantId, assetId], map: "downtime_tenant_asset_idx")
}

model Part {
  id        String @id @map("_id") @default(auto()) @db.ObjectId
  tenantId  String @map("tenant_id") @db.ObjectId
  siteId    String? @map("site_id") @db.ObjectId
  name      String
  sku       String? @unique
  onHand    Int     @map("on_hand") @default(0)
  minLevel  Int     @map("min_level") @default(0)
  cost      Float?  @map("cost")
  vendor    String?

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("parts")
  @@index([tenantId])
  @@index([minLevel, onHand, tenantId], map: "parts_min_onhand_tenant_idx")
}

enum ShiftType {
  regular
  on_call
  leave
}

enum ShiftStatus {
  pending
  approved
  completed
  cancelled
}

enum TeamInvitationStatus {
  pending
  accepted
  revoked
}

model Shift {
  id        String       @id @map("_id") @default(auto()) @db.ObjectId
  tenantId  String       @map("tenant_id") @db.ObjectId
  userId    String       @map("user_id") @db.ObjectId
  type      ShiftType    @default(regular)
  status    ShiftStatus  @default(pending)
  startsAt  DateTime     @map("starts_at")
  endsAt    DateTime     @map("ends_at")
  notes     String?      @db.String

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shifts")
  @@index([tenantId, startsAt], map: "shifts_tenant_start_idx")
  @@index([tenantId, userId], map: "shifts_tenant_user_idx")
}

model LaborEntry {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  tenantId   String   @map("tenant_id") @db.ObjectId
  userId     String   @map("user_id") @db.ObjectId
  workOrderId String? @map("work_order_id") @db.ObjectId
  startedAt  DateTime @map("started_at")
  endedAt    DateTime? @map("ended_at")
  minutes    Int       @default(0)
  notes      String?

  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workOrder WorkOrder? @relation(fields: [workOrderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("labor_entries")
  @@index([tenantId, startedAt], map: "labor_tenant_started_idx")
  @@index([tenantId, userId], map: "labor_tenant_user_idx")
  @@index([tenantId, workOrderId], map: "labor_tenant_workorder_idx")
}

model TeamInvitation {
  id         String                @id @map("_id") @default(auto()) @db.ObjectId
  tenantId   String                @map("tenant_id") @db.ObjectId
  email      String
  role       String
  status     TeamInvitationStatus  @default(pending)
  message    String?
  invitedById String?              @map("invited_by") @db.ObjectId
  expiresAt  DateTime?             @map("expires_at")

  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invitedBy User?  @relation("InvitedBy", fields: [invitedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_invitations")
  @@index([tenantId, status], map: "team_invites_tenant_status_idx")
  @@index([tenantId, email], map: "team_invites_email_idx")
}

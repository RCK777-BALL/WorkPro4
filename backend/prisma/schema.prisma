// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Tenant {
  id   String @id @map("_id") @default(auto()) @db.ObjectId
  name String

  users         User[]
  sites         Site[]
  areas         Area[]
  lines         Line[]
  stations      Station[]
  assets        Asset[]
  parts         Part[]
  vendors       Vendor[]
  workOrders    WorkOrder[]
  pmTasks       PMTask[]
  purchaseOrders PurchaseOrder[]
  attachments   Attachment[]
  auditLogs     AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenants")
}

model User {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  tenantId     String   @map("tenant_id") @db.ObjectId
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String
  roles        String[] // ['tech', 'planner', 'supervisor', 'admin']

  tenant Tenant @relation(fields: [tenantId], references: [id])

  createdWorkOrders WorkOrder[] @relation("CreatedBy")
  auditLogs         AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Site {
  id       String @id @map("_id") @default(auto()) @db.ObjectId
  tenantId String @map("tenant_id") @db.ObjectId
  name     String

  tenant Tenant @relation(fields: [tenantId], references: [id])
  areas  Area[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sites")
}

model Area {
  id       String @id @map("_id") @default(auto()) @db.ObjectId
  tenantId String @map("tenant_id") @db.ObjectId
  siteId   String @map("site_id") @db.ObjectId
  name     String

  tenant Tenant @relation(fields: [tenantId], references: [id])
  site   Site   @relation(fields: [siteId], references: [id])
  lines  Line[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("areas")
}

model Line {
  id       String @id @map("_id") @default(auto()) @db.ObjectId
  tenantId String @map("tenant_id") @db.ObjectId
  areaId   String @map("area_id") @db.ObjectId
  name     String

  tenant   Tenant    @relation(fields: [tenantId], references: [id])
  area     Area      @relation(fields: [areaId], references: [id])
  stations Station[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lines")
}

model Station {
  id       String @id @map("_id") @default(auto()) @db.ObjectId
  tenantId String @map("tenant_id") @db.ObjectId
  lineId   String @map("line_id") @db.ObjectId
  name     String

  tenant Tenant  @relation(fields: [tenantId], references: [id])
  line   Line    @relation(fields: [lineId], references: [id])
  assets Asset[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stations")
}

enum AssetStatus {
  operational
  down
  maintenance
  retired
}

model Asset {
  id          String      @id @map("_id") @default(auto()) @db.ObjectId
  tenantId    String      @map("tenant_id") @db.ObjectId
  stationId   String?     @map("station_id") @db.ObjectId
  code        String
  name        String
  status      AssetStatus @default(operational)
  criticality Int         @default(3) // 1-5 scale
  meterJson   Json?       @map("meter_json") // {name: string, value: number, unit: string}[]
  docsFolder  String?     @map("docs_folder")

  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  station   Station?   @relation(fields: [stationId], references: [id])
  workOrders WorkOrder[]
  pmTasks   PMTask[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, code])
  @@map("assets")
}

model Part {
  id       String  @id @map("_id") @default(auto()) @db.ObjectId
  tenantId String  @map("tenant_id") @db.ObjectId
  sku      String
  name     String
  min      Int     @default(0)
  max      Int     @default(100)
  onHand   Int     @default(0) @map("on_hand")
  cost     Float   @default(0)
  vendorId String? @map("vendor_id") @db.ObjectId

  tenant Tenant  @relation(fields: [tenantId], references: [id])
  vendor Vendor? @relation(fields: [vendorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, sku])
  @@map("parts")
}

model Vendor {
  id          String @id @map("_id") @default(auto()) @db.ObjectId
  tenantId    String @map("tenant_id") @db.ObjectId
  name        String
  contactJson Json?  @map("contact_json") // {email?, phone?, address?}

  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  parts          Part[]
  purchaseOrders PurchaseOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vendors")
}

enum WorkOrderPriority {
  low
  medium
  high
  urgent
}

enum WorkOrderStatus {
  requested
  assigned
  in_progress
  completed
  cancelled
}

enum ApprovalStatus {
  not_required
  pending
  approved
  rejected
}

model WorkOrder {
  id             String           @id @map("_id") @default(auto()) @db.ObjectId
  tenantId       String           @map("tenant_id") @db.ObjectId
  assetId        String?          @map("asset_id") @db.ObjectId
  lineName       String?          @map("line_name")
  stationNumber  String?          @map("station_number")
  title          String
  description    String?
  priority       WorkOrderPriority @default(medium)
  status         WorkOrderStatus   @default(requested)
  approvalStatus ApprovalStatus    @default(not_required) @map("approval_status")
  assignees      String[]         // user ids
  checklists     Json?            // {text: string, done: boolean, note?: string, completedAt?: string}[]
  partsUsed      Json?            @map("parts_used") // {partId: string, qty: number, cost?: number}[]
  signatures     Json?            // {byUserId: string, byName?: string, role?: string, ts: string}[]
  timeSpentMin   Int?             @map("time_spent_min")
  photos         String[]         // attachment URLs
  failureCode    String?          @map("failure_code")
  pmTaskId       String?          @map("pm_task_id") @db.ObjectId
  createdBy      String           @map("created_by") @db.ObjectId

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  asset     Asset?   @relation(fields: [assetId], references: [id])
  pmTask    PMTask?  @relation(fields: [pmTaskId], references: [id])
  createdByUser User @relation("CreatedBy", fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_orders")
}

model PMTask {
  id              String    @id @map("_id") @default(auto()) @db.ObjectId
  tenantId        String    @map("tenant_id") @db.ObjectId
  assetId         String    @map("asset_id") @db.ObjectId
  title           String
  ruleJson        Json      @map("rule_json") // {type: 'calendar'|'meter', cron?: string, meterName?: string, threshold?: number}
  lastGeneratedAt DateTime? @map("last_generated_at")
  active          Boolean   @default(true)

  tenant     Tenant      @relation(fields: [tenantId], references: [id])
  asset      Asset       @relation(fields: [assetId], references: [id])
  workOrders WorkOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pm_tasks")
}

enum PurchaseOrderStatus {
  draft
  issued
  received
  closed
}

model PurchaseOrder {
  id       String              @id @map("_id") @default(auto()) @db.ObjectId
  tenantId String              @map("tenant_id") @db.ObjectId
  vendorId String              @map("vendor_id") @db.ObjectId
  status   PurchaseOrderStatus @default(draft)
  lines    Json                // {partId: string, qty: number, unitCost: number}[]

  tenant Tenant @relation(fields: [tenantId], references: [id])
  vendor Vendor @relation(fields: [vendorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("purchase_orders")
}

model Attachment {
  id          String @id @map("_id") @default(auto()) @db.ObjectId
  tenantId    String @map("tenant_id") @db.ObjectId
  url         String
  filename    String
  contentType String @map("content_type")
  size        Int

  tenant Tenant @relation(fields: [tenantId], references: [id])

  createdAt DateTime @default(now())

  @@map("attachments")
}

model AuditLog {
  id         String    @id @map("_id") @default(auto()) @db.ObjectId
  ts         DateTime  @default(now())
  tenantId   String    @map("tenant_id") @db.ObjectId
  userId     String?   @map("user_id") @db.ObjectId
  action     String    // 'create', 'update', 'delete', 'assign', 'complete', etc.
  entityType String    @map("entity_type") // 'work_order', 'asset', 'part', etc.
  entityId   String    @map("entity_id")
  beforeJson Json?     @map("before_json")
  afterJson  Json?     @map("after_json")

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id   String @id @default(cuid())
  name String

  users          User[]
  sites          Site[]
  areas          Area[]
  lines          Line[]
  stations       Station[]
  assets         Asset[]
  parts          Part[]
  vendors        Vendor[]
  workOrders     WorkOrder[]
  pmTasks        PMTask[]
  purchaseOrders PurchaseOrder[]
  attachments    Attachment[]
  auditLogs      AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenants")
}

model User {
  id           String   @id @default(cuid())
  tenantId     String   @map("tenant_id")
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String
  roles        String[] // ['tech', 'planner', 'supervisor', 'admin']

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdWorkOrders WorkOrder[] @relation("CreatedBy")
  auditLogs         AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Site {
  id       String @id @default(cuid())
  tenantId String @map("tenant_id")
  name     String

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  areas  Area[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sites")
}

model Area {
  id       String @id @default(cuid())
  tenantId String @map("tenant_id")
  siteId   String @map("site_id")
  name     String

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  lines  Line[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("areas")
}

model Line {
  id       String @id @default(cuid())
  tenantId String @map("tenant_id")
  areaId   String @map("area_id")
  name     String

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  area     Area      @relation(fields: [areaId], references: [id], onDelete: Cascade)
  stations Station[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lines")
}

model Station {
  id       String @id @default(cuid())
  tenantId String @map("tenant_id")
  lineId   String @map("line_id")
  name     String

  tenant Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  line   Line    @relation(fields: [lineId], references: [id], onDelete: Cascade)
  assets Asset[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stations")
}

enum AssetStatus {
  operational
  down
  maintenance
  retired
}

model Asset {
  id          String      @id @default(cuid())
  tenantId    String      @map("tenant_id")
  stationId   String?     @map("station_id")
  code        String
  name        String
  status      AssetStatus @default(operational)
  criticality Int         @default(3) // 1-5 scale
  meterJson   Json?       @map("meter_json") // {name: string, value: number, unit: string}[]
  docsFolder  String?     @map("docs_folder")

  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  station    Station?    @relation(fields: [stationId], references: [id], onDelete: SetNull)
  workOrders WorkOrder[]
  pmTasks    PMTask[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, code])
  @@map("assets")
}

model Part {
  id       String  @id @default(cuid())
  tenantId String  @map("tenant_id")
  sku      String
  name     String
  min      Int     @default(0)
  max      Int     @default(100)
  onHand   Int     @default(0) @map("on_hand")
  cost     Decimal @default(0) @db.Decimal(10, 2)
  vendorId String? @map("vendor_id")

  tenant Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vendor Vendor? @relation(fields: [vendorId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, sku])
  @@map("parts")
}

model Vendor {
  id          String @id @default(cuid())
  tenantId    String @map("tenant_id")
  name        String
  contactJson Json?  @map("contact_json") // {email?, phone?, address?}

  tenant         Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parts          Part[]
  purchaseOrders PurchaseOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vendors")
}

enum WorkOrderPriority {
  low
  medium
  high
  urgent
}

enum WorkOrderStatus {
  requested
  assigned
  in_progress
  completed
  cancelled
}

enum ApprovalStatus {
  not_required
  pending
  approved
  rejected
}

model WorkOrder {
  id             String            @id @default(cuid())
  tenantId       String            @map("tenant_id")
  assetId        String?           @map("asset_id")
  title          String
  description    String?
  priority       WorkOrderPriority @default(medium)
  status         WorkOrderStatus   @default(requested)
  approvalStatus ApprovalStatus    @default(not_required) @map("approval_status")
  assignees      String[] // user ids
  checklists     Json? // {text: string, done: boolean, note?: string, completedAt?: string}[]
  partsUsed      Json?             @map("parts_used") // {partId: string, qty: number, cost?: number}[]
  signatures     Json? // {byUserId: string, byName?: string, role?: string, ts: string}[]
  timeSpentMin   Int?              @map("time_spent_min")
  photos         String[] // attachment URLs
  failureCode    String?           @map("failure_code")
  pmTaskId       String?           @map("pm_task_id")
  createdBy      String            @map("created_by")

  tenant        Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  asset         Asset?  @relation(fields: [assetId], references: [id], onDelete: SetNull)
  pmTask        PMTask? @relation(fields: [pmTaskId], references: [id], onDelete: SetNull)
  createdByUser User    @relation("CreatedBy", fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_orders")
}

model PMTask {
  id              String    @id @default(cuid())
  tenantId        String    @map("tenant_id")
  assetId         String    @map("asset_id")
  title           String
  ruleJson        Json      @map("rule_json") // {type: 'calendar'|'meter', cron?: string, meterName?: string, threshold?: number}
  lastGeneratedAt DateTime? @map("last_generated_at")
  active          Boolean   @default(true)

  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  asset      Asset       @relation(fields: [assetId], references: [id], onDelete: Cascade)
  workOrders WorkOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pm_tasks")
}

enum PurchaseOrderStatus {
  draft
  issued
  received
  closed
}

model PurchaseOrder {
  id       String              @id @default(cuid())
  tenantId String              @map("tenant_id")
  vendorId String              @map("vendor_id")
  status   PurchaseOrderStatus @default(draft)
  lines    Json // {partId: string, qty: number, unitCost: number}[]

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("purchase_orders")
}

model Attachment {
  id          String @id @default(cuid())
  tenantId    String @map("tenant_id")
  url         String
  filename    String
  contentType String @map("content_type")
  size        Int

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("attachments")
}

model AuditLog {
  id         String   @id @default(cuid())
  ts         DateTime @default(now())
  tenantId   String   @map("tenant_id")
  userId     String?  @map("user_id")
  action     String // 'create', 'update', 'delete', 'assign', 'complete', etc.
  entityType String   @map("entity_type") // 'work_order', 'asset', 'part', etc.
  entityId   String   @map("entity_id")
  beforeJson Json?    @map("before_json")
  afterJson  Json?    @map("after_json")

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
